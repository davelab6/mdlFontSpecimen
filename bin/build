#!/usr/bin/env node
"use strict";

exports.command = {
    description: 'Build the mdl-font-specimen.js script '
  , arguments: '[libdir] [outdir]'
};

if (require.main === module) {

var requirejs = require('requirejs')
  , path = require('path')
  , program = require('commander')
  ,fs = require('fs')
  ;

program._name = path.basename(process.argv[1]).replace('-', ' ');
program.arguments(exports.command.arguments)
    .description(exports.command.description);

program.action(function (libdir, outDir) {
    outDir += outDir.slice(-1) === '/' ? '' : '/';
    libdir += libdir.slice(-1) === '/' ? '' : '/';
    var baseUrl = path.resolve(process.cwd(), libdir)
      , outFile = outDir + 'mdl-font-specimen.js'
      , cssSourceFile = libdir + 'css/main.css'
      , cssOutFile = outDir + 'mdl-font-specimen.css'
      , copySetup
      , bootstrap
      ;
    requirejs.config({
        baseUrl: baseUrl
    });

    // This is the setup for the optimizer.
    var setup = {
            baseUrl: baseUrl
          , paths: {
                almond: '../node_modules/almond/almond'
            }
          , include: ['almond', 'main']
          , name: 'init'// <== see rawText
          , insertRequire: ['init']
          , optimize: 'uglify'
          , out: outFile // relative to cwd
          , rawText: {
              init: 'define(["main"], function(main) {main();});'
          }
        }
      ;

    copySetup = requirejs('bower_components/Atem-RequireJS-Config/tools').copySetup;
    // this essentialy configures the require.js path setup
    bootstrap = requirejs('bootstrap');
    // Notably the argument is duck typing the require.config interface that
    // bootstrap expects.
    bootstrap({config: function(configData){ copySetup(configData, setup); }});
    console.log(setup);

    requirejs.optimize(setup, function (buildResponse) {
        // buildResponse is just a text output of the modules
        // included. Load the built file for the contents.
        // Use config.out to get the optimized file contents.
        console.log('buildResponse:\n', buildResponse);
    }, function(err) {
        //optimization err callback
        console.log('Error:', err);
        throw err;
    });



    // CSS: no build step needed yet
    fs.createReadStream(cssSourceFile)
      .pipe(fs.createWriteStream(cssOutFile));
});
program.parse(process.argv);
}
